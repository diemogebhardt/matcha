---
source: src/renderer.rs
expression: "{> fn full_name(names: List(String))\n{% for name in names %}{{ name }},{% endfor %}\"\n{> endfn\nHello {[ names(\"Gleam\") ]}"
---
// DO NOT EDIT: Code generated by matcha from -test-

import gleam/string_tree.{type StringTree}
import gleam/list

fn full_name(names: List(String)) -> StringTree {
    let builder = string_tree.from_string("")
    let builder = list.fold(names, builder, fn(builder, name) {
            let builder = string_tree.append(builder, name)
    let builder = string_tree.append(builder, ",")

        builder
})
    let builder = string_tree.append(builder, "\"")

    builder
}

pub fn render_builder() -> StringTree {
    let builder = string_tree.from_string("")
    let builder = string_tree.append(builder, "Hello ")
    let builder = string_tree.append_tree(builder, names("Gleam"))

    builder
}

pub fn render() -> String {
    string_tree.to_string(render_builder())
}
